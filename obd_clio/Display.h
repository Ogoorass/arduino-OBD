#include <avr/pgmspace.h>
#ifndef DISPLAY_H
#define DISPLAY_H

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>



// display stuff
#define TEXT_SIZE 3 // size for main text
#define TEXT_SIZE_UNIT_FRACTIONAL 1 // size for fractional unit text
#define TEXT_SIZE_UNIT_NORMAL 2 // size of normal unit text
#define TEXT_SIZE_ERROR 2 // size of error text
#define TEXT_Y_OFFSET 7 // vertical offset of main text
#define UNIT_FRACTIONAL_DIVIDING_LINE_LENGTH 20 // length of an dividing line in unit
#define NOMINATOR_Y_OFFSET 5 // y offset of nominator 
#define DENOMINATOR_Y_OFFSET 23 //y offset of denominator  
#define UNIT_NORMAL_X_OFFSET 20 // x offset of the start of the normal unit
#define UNIT_NORMAL_Y_OFFSET 16 // y offset of normal unit

// Renault logo
static const uint32_t renaultLogo[32][4] PROGMEM = {
{0b00000000011111110000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000000111111111000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000000110000101100000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000001100000100100000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000011000001100110000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000011000001000110000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000110000011000011000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000110000010000001000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00001100000111000001100000001111,0b11111111000001111111111110011111,0b10001111110001111111000001111111,0b00011110111111110001111111111111},
{0b00001100000101000000110000001111,0b11111111100001111111111111001111,0b11000111100001111111000001111111,0b00011110111111110001111111111111},
{0b00011000001101100000110000000111,0b11000111110000011110000111000111,0b11000011000000011111100000111110,0b00001100011111100001110111110111},
{0b00110000001000110000011000000011,0b11000011111000011110000111000111,0b11100011000000111111100000111110,0b00001100001111000001100111110011},
{0b00110000011000010000011000000011,0b11000011111000011110000000000111,0b11100011000000110111100000111110,0b00001100001111000001100011100011},
{0b01100000110000011000001100000011,0b11000011111000011110000000000111,0b11110011000000110111110000111110,0b00001100001111000000000011100000},
{0b01100000100000001000001100000011,0b11000111110000011110011000000111,0b11110011000001110111110000111110,0b00001100001111000000000011100000},
{0b11000001100000001100000110000011,0b11111111100000011111111000000111,0b11111011000001100011110000111110,0b00001100001111000000000011100000},
{0b11111111100000001111111110000011,0b11111111000000011111111000000110,0b11111011000001100011110000111110,0b00001100001111000000000011100000},
{0b01111111100000001111111100000011,0b11001111000000011110011000000110,0b11111111000011111111111000111110,0b00001100001111000000000011100000},
{0b01111111110000011111111100000011,0b11001111100000011110000000000110,0b01111111000011000011111000111110,0b00001100001111000000000011100000},
{0b00111111111000111111111000000011,0b11000111100000011110000011000110,0b01111111000011000001111000111110,0b00001100001111000011000011100000},
{0b00011111111000111111111000000011,0b11000111110000011110000011000110,0b00111111000110000001111000111110,0b00001100001111000011000011100000},
{0b00011111111101111111110000000011,0b11000011110000011110000011000110,0b00011111000110000000111100011110,0b00001100001111000011000011100000},
{0b00001111111101111111100000000111,0b11100011111000111111000111001111,0b00011111000110000000111100011111,0b11111000011111100111000111110000},
{0b00001111111111111111100000001111,0b11110001111101111111111111011111,0b10001111101111000011111110000111,0b11110000111111111111001111111000},
{0b00000111111111111111000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000111111111111111000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000011111111111110000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000001111111111110000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000001111111111100000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000000111111111000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000000111111111000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000},
{0b00000000011111110000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000,0b00000000000000000000000000000000}};

static const uint16_t PROGMEM degree[10] = {
  0b0001111000,
  0b0011111100,
  0b0110000110,
  0b1100000011,
  0b1100000011,
  0b1100000011,
  0b1100000011,
  0b0110000110,
  0b0011111100,
  0b0001111000
};

class Display : public Adafruit_SSD1306 {

  public:  
    using Adafruit_SSD1306::Adafruit_SSD1306;
    // puts char pointer array in display buffer
    // in logo_bmp[] should be 32 pointers to 128-length strings
    void putLogoInDisplayBuffer() {
      for (int y = 0; y < _height; y++)
      {
        for (int i =0; i<4; i++) {
          uint32_t halfLine = pgm_read_dword(&(renaultLogo[y][i]));
          for (int x = 31; x >= 0; x--) {
            if (halfLine & 1) {
              drawPixel(x + 32 * i, y, SSD1306_WHITE);
            } 
            halfLine >>= 1;
          }
        }
      }
    }

    void init() {
      setTextColor(SSD1306_WHITE);  // set display color to white even though my display cant display anything else
      setTextSize(TEXT_SIZE);       // set size of the text
      setRotation(2);               // display is upside dowm :skull_emoji:, so rotate 180deg
    }

    void drawDegree(uint16_t x, uint16_t y) {
      for(int i=0; i<10; i++) {
        uint16_t line = pgm_read_word(degree + i);
        for(int j=10; j >= 0; j--) {
          if(line & 1)
            drawPixel(x+j, y+i, SSD1306_WHITE);
          line >>= 1;
        }
      }
    }
    
};

#endif